def get_entries(list_id):
    res = post(f"""{base_url}/lists/{my_lst["id"]}/entries/filter/list""",
          headers=auth_header, json=
    {
        "filter": {},
        "limit": 100,
        "skip": 0,
        "allowDeprecated": False,
    })
    return res.json()

def get_workspace_users(workspace_name):
    wid = get_id(workspace_name)
    res = get(f"{base_url}/workspaces/{wid}/users", headers=auth_header)
    return res.json()



def get_label_map(list_id, field_name):
    res = get(f"{base_url}/lists/{list_id}/elements",
              headers=auth_header)
    elements = res.json()
    field = next(field for field in elements if field["name"] == field_name)
    categories = field["elementData"]["predefinedCategories"]
    return {c["name"]: c["id"] for c in categories}


def get_pub_entries(project, person=None):
    cql_person = f"&cql=person%3D{person}" if person else ""
    pubrecord = "https://www.hsbi.de/publikationsserver/record/"
    url = f"https://www.hsbi.de/publikationsserver/export?cql=project%3D{project}{cql_person}&lang=de&fmt=json"
    res = get(url)
    return res.json()

users = get_workspace_users("TransCareTech")
by_name = {f'{u["displayname"]}':u["id"] for u in users}

zuordnungen = get_label_map(lid, "Zuordnung")

tag_map = {'Alexander Neumann': ["IK3"],
 'Christoph Ostrau': ["CDI"],
 'Claudia Weymann': [],
 'Kamil Joseph Wrona': ["IK5"],
 'Marcel Siegler': ["IK6"],
 'Maren Schorch': ["GradSchool"],
 'Mariya Lorke': ["GradSchool"],
 'Thekla Stefanou': ["IK1"],
 'Thomas Buhl': ["Panels"],
 'Tim Christian Herzig': ["RL Geriatrie"]}

def get_authors_tags(entry):
    authors = []
    tags = set()

    for author in entry["author"]:
        name = f'{author["first_name"]} {author["last_name"]}'
        if name in by_name:
            authors.append(by_name[name])
            for tag in tag_map[name]:
                tags.add(tag)
    return authors, [zuordnungen[tag] for tag in tags]

def get_tags(author_ids):
    for author in author_ids:
        for tag in tag_map[author]:
            tags.add(tag)
    return 

for entry in pub_entries:
    op = put if entry["_id"] in zen_dict else post
    authors, tags = get_authors_tags(entry)
    # entry["title"]
    data = {
        "6c04f722-9031-497e-8d0e-9115fe21f08c_text": entry["_id"],
        "e6e51863-d9c5-4203-b075-3054f5c0d353_text": entry["title"],
        "456eae07-549c-4080-84f8-e104b0b90317_number": entry["year"],
        "69953553-71b5-4125-a988-09252d6941ae_link": "https://www.hsbi.de/publikationsserver/record/" + entry["_id"],
        "87b1885c-81fd-4ba0-a1c7-e0c6cebd67ad_persons": authors,
        "5562e5a4-a3ac-47ed-a758-f2d110f04f06_categories": tags,

    }
    res = op(f"{base_url}/lists/{lid}/entries", json=data, headers=auth_header)